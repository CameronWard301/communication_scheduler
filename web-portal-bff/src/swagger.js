"use strict";
Object.defineProperty(exports, "__esModule", {value: true});
var fs = require("fs");
var path = require("path");
var options = {
    openapi: "3.0.0",
};
var swaggerAutogen = require("swagger-autogen")(options);
var outputFile = './src/swagger_output.json';
var doc = {
    info: {
        version: '1.0.0',
        title: 'Communication Scheduler BFF API',
        description: 'Documentation automatically generated by the <b>swagger-autogen</b> module.'
    },
    host: 'localhost:3000',
    basePath: '/v1/bff/',
    schemes: ['https', "http"],
    consumes: ['application/json'],
    produces: ['application/json'],
    tags: [
        {
            name: 'Auth',
            description: 'Authentication related end-points'
        },
        {
            name: 'Preferences',
            description: 'Preferences related end-points'
        }
    ],
    securityDefinitions: {
        bearerAuth: {
            type: 'http',
            scheme: 'bearer'
        }
    },
    components: {
        schemas: {
            AuthToken: {
                token: 'string',
                expires: 'string'
            },
            AuthScopes: ['GATEWAY:READ', 'GATEWAY:WRITE'],
            Preferences: {
                gatewayTimeoutSeconds: 100,
                maximumAttempts: 200,
                backoffCoefficient: 4.0,
                initialInterval: {
                    value: 1,
                    unit: 'S'
                },
                maximumInterval: {
                    value: 100,
                    unit: 'D'
                },
                startToCloseTimeout: {
                    value: 100,
                    unit: 'H'
                }
            }
        }
    }
};
/**
 * Find all the controller files in the project
 * @param root of the project relative to this file
 * @returns a list of paths to the controller files
 */
var GetControllerFilePaths = function (root) {
    var controllerPaths = [];
    var traverseDirectory = function (dir) {
        var files = fs.readdirSync(dir);
        console.log('files: ' + files);
        for (var _i = 0, files_1 = files; _i < files_1.length; _i++) {
            var file = files_1[_i];
            var filePath = path.join(dir, file);
            var stats = fs.statSync(filePath);
            if (stats.isDirectory()) {
                traverseDirectory(filePath);
            } else if (stats.isFile()) {
                var fileName = path.basename(file);
                if (fileName.endsWith('controller.ts')) {
                    var relativePath = path.relative(root, filePath);
                    controllerPaths.push(root + relativePath);
                }
            }
        }
    };
    traverseDirectory(root);
    console.log('controllerPaths: ' + controllerPaths);
    return controllerPaths;
};
// Will prodice a swagger_output.json file in the root of the project that reflects the current state of the project
swaggerAutogen(outputFile, GetControllerFilePaths('./src/'), doc).then();
