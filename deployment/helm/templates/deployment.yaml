apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-communication-worker
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}-communication-worker
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-communication-worker
        release: {{ .Release.Name }}
    spec:
      containers:
        - name: {{ .Release.Name }}-communication-worker
          image: "{{ .Values.communication_worker.repository }}:{{ .Values.communication_worker.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - containerPort: 8080
          env:
            - name: "TEMPORAL_ENDPOINT"
              value: "{{ .Release.Name}}-temporal-frontend.{{.Release.Namespace}}.svc.cluster.local:7233"
            {{- if .Values.useAwsKubernetesSecret }}
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: aws-credentials
                  key: AWS_ACCESS_KEY_ID
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: aws-credentials
                  key: AWS_SECRET_ACCESS_KEY
            {{- end }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-email-gateway
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
      matchLabels:
        app: {{ .Release.Name }}-email-gateway
        release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-email-gateway
        release: {{ .Release.Name }}
    spec:
      containers:
        - name: {{ .Release.Name }}-email-gateway
          image: "{{ .Values.email_gateway.repository }}:{{ .Values.email_gateway.tag }}"
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
          env:
            {{- if .Values.useAwsKubernetesSecret }}
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: aws-credentials
                  key: AWS_ACCESS_KEY_ID
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: aws-credentials
                  key: AWS_SECRET_ACCESS_KEY
                        {{- end }}
            - name: "EMAIL_NEWSLETTER_API"
              value: "{{ .Values.env.email_gateway.sendgridApiKey}}"
            - name: "FROM_EMAIL"
              value: "{{ .Values.env.email_gateway.fromEmail }}"
            - name: "FROM_NAME"
              value: "{{ .Values.env.email_gateway.fromName }}"
            - name: "MONTHLY_NEWSLETTER_TEMPLATE_ID"
              value: "{{ .Values.env.email_gateway.monthlyNewsletterTemplateId }}"
            - name: "USER1_EMAIL"
              value: "{{ .Values.env.email_gateway.user1Email }}"
            - name: "USER2_EMAIL"
              value: "{{ .Values.env.email_gateway.user2Email }}"
            - name: "COMMUNICATION_HISTORY_TABLE_NAME"
              value: "{{ .Values.env.email_gateway.tableName }}"
            - name: "REGION"
              value: "{{ .Values.email_gateway.region }}"
            - name: "GATEWAY_LOGGING_LEVEL"
              value: "{{ .Values.email_gateway.loggingLevel }}"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-sms-gateway
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}-sms-gateway
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-sms-gateway
        release: {{ .Release.Name }}
    spec:
      containers:
        - name: {{ .Release.Name }}-sms-gateway
          image: "{{ .Values.sms_gateway.repository }}:{{ .Values.sms_gateway.tag }}"
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
          env:
            {{- if .Values.useAwsKubernetesSecret }}
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: aws-credentials
                  key: AWS_ACCESS_KEY_ID
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: aws-credentials
                  key: AWS_SECRET_ACCESS_KEY
                        {{- end }}
            - name: "TWILIO_ACCOUNT_SID"
              value: "{{ .Values.env.sms_gateway.twilioAccountSid }}"
            - name: "TWILIO_AUTH_TOKEN"
              value: "{{ .Values.env.sms_gateway.twilioAuthToken }}"
            - name: "TWILIO_FROM_PHONE_NUMBER"
              value: "{{ .Values.env.sms_gateway.fromPhoneNumber }}"
            - name: "TWILIO_POLLING_INTERVAL"
              value: "{{ .Values.sms_gateway.twilioPollingInterval }}"
            - name: "TWILIO_MAXIMUM_POLLING_ATTEMPTS"
              value: "{{ .Values.sms_gateway.maximumPollingAttempts }}"
            - name: "USER1_NAME"
              value: "{{ .Values.env.sms_gateway.user1.name }}"
            - name: "USER1_PHONE_NUMBER"
              value: "{{ .Values.env.sms_gateway.user1.phoneNumber }}"
            - name: "USER2_NAME"
              value: "{{ .Values.env.sms_gateway.user2.name }}"
            - name: "USER2_PHONE_NUMBER"
              value: "{{ .Values.env.sms_gateway.user1.phoneNumber }}"
            - name: "COMMUNICATION_HISTORY_TABLE_NAME"
              value: "{{ .Values.env.sms_gateway.tableName }}"
            - name: "REGION"
              value: "{{ .Values.sms_gateway.region }}"
            - name: "GATEWAY_LOGGING"
              value: "{{ .Values.sms_gateway.loggingLevel }}"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-gateway-api
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}-gateway-api
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-gateway-api
        release: {{ .Release.Name }}
    spec:
      containers:
        - name: {{ .Release.Name }}-gateway-api
          image: "{{ .Values.gateway_api.repository }}:{{ .Values.gateway_api.tag }}"
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
          env:
            {{- if .Values.useAwsKubernetesSecret }}
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: aws-credentials
                  key: AWS_ACCESS_KEY_ID
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: aws-credentials
                  key: AWS_SECRET_ACCESS_KEY
                        {{- end }}
            - name: "MONGODB_DATABASE_NAME"
              value: "{{ .Values.env.gateway_api.mongo.databaseName }}"
            - name: "MONGODB_CONNECTION_STRING"
              value: "{{ .Values.env.gateway_api.mongo.connectionString }}"
            - name: "LOGGING_LEVEL"
              value: "{{ .Values.gateway_api.loggingLevel }}"
            - name: "AWS_REGION"
              value: "{{ .Values.gateway_api.region }}"
