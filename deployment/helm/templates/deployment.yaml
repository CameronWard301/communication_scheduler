apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-communication-worker
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}-communication-worker
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-communication-worker
        release: {{ .Release.Name }}
    spec:
      containers:
        - name: {{ .Release.Name }}-communication-worker
          image: "{{ .Values.communication_worker.repository }}:{{ .Values.communication_worker.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - containerPort: 8080
          env:
            - name: "TEMPORAL_ENDPOINT"
              value: "{{ .Release.Name}}-temporal-frontend.{{.Release.Namespace}}.svc.cluster.local:7233"
            - name: "TEMPORAL_NAMESPACE"
              value: "{{ .Values.communication_worker.temporal.namespace }}"
            - name: "TEMPORAL_TASK_QUEUE"
              value: "{{ .Values.communication_worker.temporal.taskQueue }}"
            - name: "WORKER_DEBUG"
              value: "{{ .Values.communication_worker.debug }}"
            - name: "SPRING_DEBUG"
              value: "{{ .Values.communication_worker.springDebug }}"
            - name: "MONGODB_DATABASE_NAME"
              value: "{{ .Values.env.communication_worker.mongo.databaseName }}"
            - name: "MONGODB_CONNECTION_STRING"
              value: "{{ .Values.env.communication_worker.mongo.connectionString }}"
            - name: "GATEWAY_API_KEY"
              value: "{{ .Values.env.communication_worker.apiKey }}"
            - name: "SSL_VERIFICATION"
              value: "{{ .Values.communication_worker.sslVerification }}"
      initContainers:
        - name: wait-for-temporal-worker
          image: busybox
          command: [ 'sh', '-c', 'until nslookup {{ .Release.Name}}-temporal-worker-headless.{{.Release.Namespace}}.svc.cluster.local; do echo waiting for temporal worker; sleep 2; done;' ]
        - name: wait-for-temporal-frontend
          image: busybox
          command: [ 'sh', '-c', 'until nslookup {{ .Release.Name}}-temporal-frontend.{{.Release.Namespace}}.svc.cluster.local; do echo waiting for temporal frontend; sleep 2; done;' ]

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-email-gateway
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
      matchLabels:
        app: {{ .Release.Name }}-email-gateway
        release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-email-gateway
        release: {{ .Release.Name }}
    spec:
      containers:
        - name: {{ .Release.Name }}-email-gateway
          image: "{{ .Values.email_gateway.repository }}:{{ .Values.email_gateway.tag }}"
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
          env:
            {{- if .Values.useAwsKubernetesSecret }}
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: aws-credentials
                  key: AWS_ACCESS_KEY_ID
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: aws-credentials
                  key: AWS_SECRET_ACCESS_KEY
                        {{- end }}
            - name: "EMAIL_NEWSLETTER_API"
              value: "{{ .Values.env.email_gateway.sendgridApiKey}}"
            - name: "FROM_EMAIL"
              value: "{{ .Values.env.email_gateway.fromEmail }}"
            - name: "FROM_NAME"
              value: "{{ .Values.env.email_gateway.fromName }}"
            - name: "MONTHLY_NEWSLETTER_TEMPLATE_ID"
              value: "{{ .Values.env.email_gateway.monthlyNewsletterTemplateId }}"
            - name: "USER1_EMAIL"
              value: "{{ .Values.env.email_gateway.user1Email }}"
            - name: "USER2_EMAIL"
              value: "{{ .Values.env.email_gateway.user2Email }}"
            - name: "COMMUNICATION_HISTORY_TABLE_NAME"
              value: "{{ .Values.env.email_gateway.tableName }}"
            - name: "REGION"
              value: "{{ .Values.email_gateway.region }}"
            - name: "GATEWAY_LOGGING_LEVEL"
              value: "{{ .Values.email_gateway.loggingLevel }}"
            - name: "SPRING_PROFILES_ACTIVE"
              value: "{{ .Values.email_gateway.profile }}"
            - name: "WORKER_API_KEY"
              value: "{{ .Values.env.communication_worker.apiKey }}"
            - name: "EMAIL_GATEWAY_SSL_KEY_STORE"
              value: "{{ .Values.email_gateway.keyStorePath }}"
            - name: "EMAIL_GATEWAY_SSL_KEY_STORE_PASSWORD"
              value: "{{ .Values.env.email_gateway.keyStorePassword }}"
            - name: "ROOT_LOGGING"
              value: "{{ .Values.email_gateway.rootLoggingLevel }}"
          volumeMounts:
            - mountPath: /certs/
              name: email-gateway-keystore
              readOnly: true
      volumes:
        - name: email-gateway-keystore
          secret:
            secretName: email-gateway-ssl
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-sms-gateway
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}-sms-gateway
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-sms-gateway
        release: {{ .Release.Name }}
    spec:
      containers:
        - name: {{ .Release.Name }}-sms-gateway
          image: "{{ .Values.sms_gateway.repository }}:{{ .Values.sms_gateway.tag }}"
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
          env:
            {{- if .Values.useAwsKubernetesSecret }}
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: aws-credentials
                  key: AWS_ACCESS_KEY_ID
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: aws-credentials
                  key: AWS_SECRET_ACCESS_KEY
                        {{- end }}
            - name: "TWILIO_ACCOUNT_SID"
              value: "{{ .Values.env.sms_gateway.twilioAccountSid }}"
            - name: "TWILIO_AUTH_TOKEN"
              value: "{{ .Values.env.sms_gateway.twilioAuthToken }}"
            - name: "TWILIO_FROM_PHONE_NUMBER"
              value: "{{ .Values.env.sms_gateway.fromPhoneNumber }}"
            - name: "TWILIO_POLLING_INTERVAL"
              value: "{{ .Values.sms_gateway.twilioPollingInterval }}"
            - name: "TWILIO_MAXIMUM_POLLING_ATTEMPTS"
              value: "{{ .Values.sms_gateway.maximumPollingAttempts }}"
            - name: "USER1_NAME"
              value: "{{ .Values.env.sms_gateway.user1.name }}"
            - name: "USER1_PHONE_NUMBER"
              value: "{{ .Values.env.sms_gateway.user1.phoneNumber }}"
            - name: "USER2_NAME"
              value: "{{ .Values.env.sms_gateway.user2.name }}"
            - name: "USER2_PHONE_NUMBER"
              value: "{{ .Values.env.sms_gateway.user1.phoneNumber }}"
            - name: "COMMUNICATION_HISTORY_TABLE_NAME"
              value: "{{ .Values.env.sms_gateway.tableName }}"
            - name: "REGION"
              value: "{{ .Values.sms_gateway.region }}"
            - name: "GATEWAY_LOGGING"
              value: "{{ .Values.sms_gateway.loggingLevel }}"
            - name: "SPRING_PROFILES_ACTIVE"
              value: "{{ .Values.sms_gateway.profile }}"
            - name: "WORKER_API_KEY"
              value: "{{ .Values.env.communication_worker.apiKey }}"
            - name: "SMS_GATEWAY_SSL_KEY_STORE"
              value: "{{ .Values.sms_gateway.keyStorePath }}"
            - name: "SMS_GATEWAY_SSL_KEY_STORE_PASSWORD"
              value: "{{ .Values.env.sms_gateway.keyStorePassword }}"
          volumeMounts:
            - mountPath: /certs/
              name: sms-gateway-keystore
              readOnly: true
      volumes:
        - name: sms-gateway-keystore
          secret:
            secretName: sms-gateway-ssl
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-gateway-api
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}-gateway-api
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-gateway-api
        release: {{ .Release.Name }}
    spec:
      containers:
        - name: {{ .Release.Name }}-gateway-api
          image: "{{ .Values.gateway_api.repository }}:{{ .Values.gateway_api.tag }}"
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
          env:
            - name: "MONGODB_DATABASE_NAME"
              value: "{{ .Values.env.gateway_api.mongo.databaseName }}"
            - name: "MONGODB_CONNECTION_STRING"
              value: "{{ .Values.env.gateway_api.mongo.connectionString }}"
            - name: "LOGGING_LEVEL"
              value: "{{ .Values.gateway_api.loggingLevel }}"
            - name: "JWKS_URI"
              value: https://{{ .Release.Name}}-auth-api-service.{{.Release.Namespace}}.svc.cluster.local:8080/auth/.well-known/jwks.json
            - name: "GATEWAY_API_SSL_KEY_STORE"
              value: "{{ .Values.gateway_api.keyStorePath }}"
            - name: "GATEWAY_API_SSL_KEY_STORE_PASSWORD"
              value: "{{ .Values.env.gateway_api.keyStorePassword }}"
          volumeMounts:
            - mountPath: /certs/
              name: gateway-keystore
              readOnly: true
      volumes:
        - name: gateway-keystore
          secret:
            secretName: gateway-api-ssl
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-auth-api
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}-auth-api
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-auth-api
        release: {{ .Release.Name }}
    spec:
      containers:
        - name: {{ .Release.Name }}-auth-api
          image: "{{ .Values.auth_api.repository }}:{{ .Values.auth_api.tag }}"
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
          env:
            - name: "AUTH_API_KEY_ID"
              value: "{{ .Values.auth_api.keyId }}"
            - name: "AUTH_API_PRIVATE_KEY"
              value: "{{ .Values.env.auth_api.privateKey }}"
            - name: "AUTH_API_PUBLIC_KEY"
              value: "{{ .Values.env.auth_api.publicKey}}"
            - name: "AUTH_API_TOKEN_EXPIRATION"
              value: "{{ .Values.auth_api.tokenExpiration }}"
            - name: "AUTH_API_SSL_KEY_STORE"
              value: "{{ .Values.auth_api.keyStorePath }}"
            - name: "AUTH_API_SSL_KEY_STORE_PASSWORD"
              value: "{{ .Values.env.auth_api.keyStorePassword }}"
            - name: "SPRING_PROFILES_ACTIVE"
              value: "{{ .Values.auth_api.profile }}"
            - name: "SPRING_DEBUG"
              value: "{{ .Values.auth_api.loggingLevel }}"
          volumeMounts:
            - mountPath: /certs/
              name: keystore
              readOnly: true
      volumes:
        - name: keystore
          secret:
            secretName: auth-api-ssl

