apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-communication-worker
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}-communication-worker
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-communication-worker
        release: {{ .Release.Name }}
    spec:
      containers:
        - name: {{ .Release.Name }}-communication-worker
          image: "{{ .Values.communication_worker.repository }}:{{ .Values.communication_worker.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - containerPort: 8080
          env:
            - name: "TEMPORAL_ENDPOINT"
              value: "{{ .Release.Name}}-temporal-frontend.{{.Release.Namespace}}.svc.cluster.local:7233"
            - name: "TEMPORAL_NAMESPACE"
              value: "{{ .Values.communication_worker.temporal.namespace }}"
            - name: "TEMPORAL_TASK_QUEUE"
              value: "{{ .Values.communication_worker.temporal.taskQueue }}"
            - name: "WORKER_DEBUG"
              value: "{{ .Values.communication_worker.debug }}"
            - name: "SPRING_DEBUG"
              value: "{{ .Values.communication_worker.springDebug }}"
            - name: "MONGODB_DATABASE_NAME"
              valueFrom:
                secretKeyRef:
                  key: mongo-db-name
                  name: {{ .Release.Name }}-communication-worker
            - name: "MONGODB_CONNECTION_STRING"
              valueFrom:
                secretKeyRef:
                  key: mongo-db-connection-string
                  name: {{ .Release.Name }}-communication-worker
            - name: "GATEWAY_API_KEY"
              valueFrom:
                secretKeyRef:
                  key: gateway-api-key
                  name: {{ .Release.Name }}-communication-worker
            - name: "SSL_VERIFICATION"
              value: "{{ .Values.communication_worker.sslVerification }}"
            - name: "ENCRYPTION_PASSWORD"
              valueFrom:
                secretKeyRef:
                  key: password
                  name: {{ .Release.Name }}-data-converter-encryption
            - name: "ENCRYPTION_SALT"
              valueFrom:
                secretKeyRef:
                  key: salt
                  name: {{ .Release.Name }}-data-converter-encryption
      initContainers:
        - name: wait-for-temporal-worker
          image: busybox
          command: [ 'sh', '-c', 'until nslookup {{ .Release.Name}}-temporal-worker-headless.{{.Release.Namespace}}.svc.cluster.local; do echo waiting for temporal worker; sleep 2; done;' ]
        - name: wait-for-temporal-frontend
          image: busybox
          command: [ 'sh', '-c', 'until nslookup {{ .Release.Name}}-temporal-frontend.{{.Release.Namespace}}.svc.cluster.local; do echo waiting for temporal frontend; sleep 2; done;' ]
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-email-gateway
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}-email-gateway
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-email-gateway
        release: {{ .Release.Name }}
    spec:
      containers:
        - name: {{ .Release.Name }}-email-gateway
          image: "{{ .Values.email_gateway.repository }}:{{ .Values.email_gateway.tag }}"
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
          env:
            {{- if .Values.useAwsKubernetesSecret }}
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: aws-credentials
                  key: AWS_ACCESS_KEY_ID
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: aws-credentials
                  key: AWS_SECRET_ACCESS_KEY
                        {{- end }}
            - name: "EMAIL_NEWSLETTER_API"
              valueFrom:
                secretKeyRef:
                  key: sendgrid-api-key
                  name: {{ .Release.Name }}-email-gateway
            - name: "FROM_EMAIL"
              valueFrom:
                secretKeyRef:
                  key: from-email
                  name: {{ .Release.Name }}-email-gateway
            - name: "FROM_NAME"
              valueFrom:
                secretKeyRef:
                  key: from-name
                  name: {{ .Release.Name }}-email-gateway
            - name: "MONTHLY_NEWSLETTER_TEMPLATE_ID"
              valueFrom:
                secretKeyRef:
                  key: monthly-template-id
                  name: {{ .Release.Name }}-email-gateway
            - name: "USER1_EMAIL"
              valueFrom:
                secretKeyRef:
                  key: user1-email
                  name: {{ .Release.Name }}-email-gateway
            - name: "USER2_EMAIL"
              valueFrom:
                secretKeyRef:
                  key: user2-email
                  name: {{ .Release.Name }}-email-gateway
            - name: "COMMUNICATION_HISTORY_TABLE_NAME"
              valueFrom:
                secretKeyRef:
                  key: history-table-name
                  name: {{ .Release.Name }}-email-gateway
            - name: "REGION"
              value: "{{ .Values.email_gateway.region }}"
            - name: "CORS_ENABLED"
              value: "{{ .Values.email_gateway.corsEnabled }}"
            - name: "CSRF_ENABLED"
              value: "{{ .Values.email_gateway.csrfEnabled }}"
            - name: "GATEWAY_LOGGING_LEVEL"
              value: "{{ .Values.email_gateway.loggingLevel }}"
            - name: "SPRING_PROFILES_ACTIVE"
              value: "{{ .Values.email_gateway.profile }}"
            - name: "WORKER_API_KEY"
              valueFrom:
                secretKeyRef:
                  key: gateway-api-key
                  name: {{ .Release.Name }}-communication-worker
            - name: "EMAIL_GATEWAY_SSL_KEY_STORE"
              value: "{{ .Values.email_gateway.keyStorePath }}"
            - name: "EMAIL_GATEWAY_SSL_KEY_STORE_PASSWORD"
              valueFrom:
                secretKeyRef:
                  key: keystore-password
                  name: {{ .Release.Name }}-email-gateway
            - name: "ROOT_LOGGING"
              value: "{{ .Values.email_gateway.rootLoggingLevel }}"
          volumeMounts:
            - mountPath: /certs/
              name: email-gateway-keystore
              readOnly: true
      volumes:
        - name: email-gateway-keystore
          secret:
            secretName: {{ .Release.Name }}-email-gateway-ssl
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-mock-gateway
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
      matchLabels:
        app: {{ .Release.Name }}-mock-gateway
        release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-mock-gateway
        release: {{ .Release.Name }}
    spec:
      containers:
        - name: {{ .Release.Name }}-mock-gateway
          image: "{{ .Values.mock_gateway.repository }}:{{ .Values.mock_gateway.tag }}"
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
          env:
            {{- if .Values.useAwsKubernetesSecret }}
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: aws-credentials
                  key: AWS_ACCESS_KEY_ID
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: aws-credentials
                  key: AWS_SECRET_ACCESS_KEY
                        {{- end }}
            - name: "CORS_ENABLED"
              value: "{{ .Values.mock_gateway.corsEnabled }}"
            - name: "CSRF_ENABLED"
              value: "{{ .Values.mock_gateway.csrfEnabled }}"
            - name: "COMMUNICATION_HISTORY_TABLE_NAME"
              valueFrom:
                secretKeyRef:
                  key: history-table-name
                  name: {{ .Release.Name }}-mock-gateway
            - name: "REGION"
              value: "{{ .Values.mock_gateway.region }}"
            - name: "GATEWAY_LOGGING_LEVEL"
              value: "{{ .Values.mock_gateway.loggingLevel }}"
            - name: "WORKER_API_KEY"
              valueFrom:
                secretKeyRef:
                  key: gateway-api-key
                  name: {{ .Release.Name }}-communication-worker
            - name: "ROOT_LOGGING"
              value: "{{ .Values.mock_gateway.rootLoggingLevel }}"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-sms-gateway
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}-sms-gateway
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-sms-gateway
        release: {{ .Release.Name }}
    spec:
      containers:
        - name: {{ .Release.Name }}-sms-gateway
          image: "{{ .Values.sms_gateway.repository }}:{{ .Values.sms_gateway.tag }}"
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
          env:
            {{- if .Values.useAwsKubernetesSecret }}
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: aws-credentials
                  key: AWS_ACCESS_KEY_ID
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: aws-credentials
                  key: AWS_SECRET_ACCESS_KEY
                        {{- end }}
            - name: "CORS_ENABLED"
              value: "{{ .Values.sms_gateway.corsEnabled }}"
            - name: "CSRF_ENABLED"
              value: "{{ .Values.sms_gateway.csrfEnabled }}"
            - name: "TWILIO_ACCOUNT_SID"
              valueFrom:
                secretKeyRef:
                  key: twilio-account-id
                  name: {{ .Release.Name }}-sms-gateway
            - name: "TWILIO_AUTH_TOKEN"
              valueFrom:
                secretKeyRef:
                  key: twilio-auth-token
                  name: {{ .Release.Name }}-sms-gateway
            - name: "TWILIO_FROM_PHONE_NUMBER"
              valueFrom:
                secretKeyRef:
                  key: twilio-from-phone
                  name: {{ .Release.Name }}-sms-gateway
            - name: "TWILIO_POLLING_INTERVAL"
              value: "{{ .Values.sms_gateway.twilioPollingInterval }}"
            - name: "TWILIO_MAXIMUM_POLLING_ATTEMPTS"
              value: "{{ .Values.sms_gateway.maximumPollingAttempts }}"
            - name: "USER1_NAME"
              valueFrom:
                secretKeyRef:
                  key: user1-name
                  name: {{ .Release.Name }}-sms-gateway
            - name: "USER1_PHONE_NUMBER"
              valueFrom:
                secretKeyRef:
                  key: user1-phone
                  name: {{ .Release.Name }}-sms-gateway
            - name: "USER2_NAME"
              valueFrom:
                secretKeyRef:
                  key: user2-name
                  name: {{ .Release.Name }}-sms-gateway
            - name: "USER2_PHONE_NUMBER"
              valueFrom:
                secretKeyRef:
                  key: user2-phone
                  name: {{ .Release.Name }}-sms-gateway
            - name: "COMMUNICATION_HISTORY_TABLE_NAME"
              valueFrom:
                secretKeyRef:
                  key: history-table-name
                  name: {{ .Release.Name }}-sms-gateway
            - name: "REGION"
              value: "{{ .Values.sms_gateway.region }}"
            - name: "GATEWAY_LOGGING"
              value: "{{ .Values.sms_gateway.loggingLevel }}"
            - name: "SPRING_PROFILES_ACTIVE"
              value: "{{ .Values.sms_gateway.profile }}"
            - name: "WORKER_API_KEY"
              valueFrom:
                secretKeyRef:
                  key: gateway-api-key
                  name: {{ .Release.Name }}-communication-worker
            - name: "SMS_GATEWAY_SSL_KEY_STORE"
              value: "{{ .Values.sms_gateway.keyStorePath }}"
            - name: "SMS_GATEWAY_SSL_KEY_STORE_PASSWORD"
              value: "{{ .Values.env.sms_gateway.keyStorePassword }}"
          volumeMounts:
            - mountPath: /certs/
              name: sms-gateway-keystore
              readOnly: true
      volumes:
        - name: sms-gateway-keystore
          secret:
            secretName: {{ .Release.Name }}-sms-gateway-ssl
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-gateway-api
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}-gateway-api
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-gateway-api
        release: {{ .Release.Name }}
    spec:
      containers:
        - name: {{ .Release.Name }}-gateway-api
          image: "{{ .Values.gateway_api.repository }}:{{ .Values.gateway_api.tag }}"
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
          env:
            - name: "MONGODB_DATABASE_NAME"
              valueFrom:
                secretKeyRef:
                  key: mongo-db-name
                  name: {{ .Release.Name }}-gateway-api
            - name: "MONGODB_CONNECTION_STRING"
              valueFrom:
                secretKeyRef:
                  key: mongo-db-connection-string
                  name: {{ .Release.Name }}-gateway-api
            - name: "SPRING_PROFILES_ACTIVE"
              value: "{{ .Values.gateway_api.profile }}"
            - name: "LOGGING_LEVEL"
              value: "{{ .Values.gateway_api.loggingLevel }}"
            - name: "JWKS_URI"
              value: https://{{ .Release.Name}}-auth-api-service.{{.Release.Namespace}}.svc.cluster.local:8080/auth/.well-known/jwks.json
            - name: "GATEWAY_API_SSL_KEY_STORE"
              value: "{{ .Values.gateway_api.keyStorePath }}"
            - name: "GATEWAY_API_SSL_KEY_STORE_PASSWORD"
              valueFrom:
                secretKeyRef:
                  key: keystore-password
                  name: {{ .Release.Name }}-gateway-api
            - name: "VERIFY_HOSTNAMES"
              value: "{{ .Values.gateway_api.verifyHostnames }}"
          volumeMounts:
            - mountPath: /certs/
              name: gateway-keystore
              readOnly: true
      volumes:
        - name: gateway-keystore
          secret:
            secretName: {{ .Release.Name }}-gateway-api-ssl
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-preferences-api
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}-preferences-api
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-preferences-api
        release: {{ .Release.Name }}
    spec:
      containers:
        - name: {{ .Release.Name }}-preferences-api
          image: "{{ .Values.preferences_api.repository }}:{{ .Values.preferences_api.tag }}"
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
          env:
            - name: "VERIFY_HOSTNAMES"
              value: "{{ .Values.preferences_api.verifyHostnames}}"
            - name: "CLUSTER_NAMESPACE"
              value: "{{ .Values.preferences_api.clusterNamespace }}"
            - name: "SPRING_PROFILES_ACTIVE"
              value: "{{ .Values.preferences_api.profile }}"
            - name: "LOGGING_LEVEL"
              value: "{{ .Values.preferences_api.loggingLevel }}"
            - name: "JWKS_URI"
              value: https://{{ .Release.Name}}-auth-api-service.{{.Release.Namespace}}.svc.cluster.local:8080/auth/.well-known/jwks.json
            - name: "PREFERENCES_API_SSL_KEY_STORE"
              value: "{{ .Values.preferences_api.keyStorePath }}"
            - name: "PREFERENCES_API_SSL_KEY_STORE_PASSWORD"
              valueFrom:
                secretKeyRef:
                  key: keystore-password
                  name: {{ .Release.Name }}-preferences-api
          volumeMounts:
            - mountPath: /certs/
              name: preferences-keystore
              readOnly: true
      volumes:
        - name: preferences-keystore
          secret:
            secretName: {{ .Release.Name }}-preferences-api-ssl
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-auth-api
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}-auth-api
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-auth-api
        release: {{ .Release.Name }}
    spec:
      containers:
        - name: {{ .Release.Name }}-auth-api
          image: "{{ .Values.auth_api.repository }}:{{ .Values.auth_api.tag }}"
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
          env:
            - name: "AUTH_API_KEY_ID"
              value: "{{ .Values.auth_api.keyId }}"
            - name: "AUTH_API_PRIVATE_KEY"
              value: "{{ .Values.env.auth_api.privateKey }}"
            - name: "AUTH_API_PUBLIC_KEY"
              value: "{{ .Values.env.auth_api.publicKey }}"
            - name: "AUTH_API_TOKEN_EXPIRATION"
              value: "{{ .Values.auth_api.tokenExpiration }}"
            - name: "AUTH_API_SSL_KEY_STORE"
              value: "{{ .Values.auth_api.keyStorePath }}"
            - name: "AUTH_API_SSL_KEY_STORE_PASSWORD"
              valueFrom:
                secretKeyRef:
                  key: keystore-password
                  name: {{ .Release.Name }}-auth-api
            - name: "SPRING_PROFILES_ACTIVE"
              value: "{{ .Values.auth_api.profile }}"
            - name: "LOGGING_LEVEL"
              value: "{{ .Values.auth_api.loggingLevel }}"
          volumeMounts:
            - mountPath: /certs/
              name: keystore
              readOnly: true
      volumes:
        - name: keystore
          secret:
            secretName: {{ .Release.Name }}-auth-api-ssl
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-data-converter-api
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}-data-converter-api
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-data-converter-api
        release: {{ .Release.Name }}
    spec:
      containers:
        - name: {{ .Release.Name }}-data-converter-api
          image: "{{ .Values.data_converter_api.repository }}:{{ .Values.data_converter_api.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - containerPort: 8080
          env:
            - name: "LOGGING_LEVEL"
              value: "{{ .Values.data_converter_api.loggingLevel }}"
            - name: "ENCRYPTION_PASSWORD"
              valueFrom:
                secretKeyRef:
                  key: password
                  name: {{ .Release.Name }}-data-converter-encryption
            - name: "ENCRYPTION_SALT"
              valueFrom:
                secretKeyRef:
                  key: salt
                  name: {{ .Release.Name }}-data-converter-encryption
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-schedule-api
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}-schedule-api
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-schedule-api
        release: {{ .Release.Name }}
    spec:
      containers:
        - name: {{ .Release.Name }}-schedule-api
          image: "{{ .Values.schedule_api.repository }}:{{ .Values.schedule_api.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - containerPort: 8080
          env:
            - name: "TEMPORAL_ENDPOINT"
              value: "{{ .Release.Name}}-temporal-frontend.{{.Release.Namespace}}.svc.cluster.local:7233"
            - name: "VERIFY_HOSTNAMES"
              value: "{{ .Values.schedule_api.verifyHostnames }}"
            - name: "JWKS_URI"
              value: https://{{ .Release.Name}}-auth-api-service.{{.Release.Namespace}}.svc.cluster.local:8080/auth/.well-known/jwks.json
            - name: "LOGGING_LEVEL"
              value: "{{ .Values.schedule_api.loggingLevel }}"
            - name: "ENCRYPTION_PASSWORD"
              valueFrom:
                secretKeyRef:
                  key: password
                  name: {{ .Release.Name }}-data-converter-encryption
            - name: "ENCRYPTION_SALT"
              valueFrom:
                secretKeyRef:
                  key: salt
                  name: {{ .Release.Name }}-data-converter-encryption
            - name: "SCHEDULE_API_SSL_KEY_STORE"
              value: "{{ .Values.schedule_api.keyStorePath }}"
            - name: "SCHEDULE_API_SSL_KEY_STORE_PASSWORD"
              valueFrom:
                secretKeyRef:
                  key: keystore-password
                  name: {{ .Release.Name }}-schedule-api
            - name: "SPRING_PROFILES_ACTIVE"
              value: "{{ .Values.schedule_api.profile }}"
            - name: "TEMPORAL_NAMESPACE"
              value: "{{ .Values.schedule_api.temporalNamespace }}"
            - name: "TEMPORAL_TASK_QUEUE"
              value: "{{ .Values.communication_worker.temporal.taskQueue }}"
          volumeMounts:
            - mountPath: /certs/
              name: keystore
              readOnly: true
      volumes:
        - name: keystore
          secret:
            secretName: {{ .Release.Name }}-schedule-api-ssl
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-history-api
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}-history-api
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-history-api
        release: {{ .Release.Name }}
    spec:
      containers:
        - name: {{ .Release.Name }}-history-api
          image: "{{ .Values.history_api.repository }}:{{ .Values.history_api.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - containerPort: 8080
          env:
            - name: "TEMPORAL_ENDPOINT"
              value: "{{ .Release.Name}}-temporal-frontend.{{.Release.Namespace}}.svc.cluster.local:7233"
            - name: "VERIFY_HOSTNAMES"
              value: "{{ .Values.history_api.verifyHostnames }}"
            - name: "JWKS_URI"
              value: https://{{ .Release.Name}}-auth-api-service.{{.Release.Namespace}}.svc.cluster.local:8080/auth/.well-known/jwks.json
            - name: "LOGGING_LEVEL"
              value: "{{ .Values.history_api.loggingLevel }}"
            - name: "ENCRYPTION_PASSWORD"
              valueFrom:
                secretKeyRef:
                  key: password
                  name: {{ .Release.Name }}-data-converter-encryption
            - name: "ENCRYPTION_SALT"
              valueFrom:
                secretKeyRef:
                  key: salt
                  name: {{ .Release.Name }}-data-converter-encryption
            - name: "HISTORY_API_SSL_KEY_STORE"
              value: "{{ .Values.history_api.keyStorePath }}"
            - name: "HISTORY_API_SSL_KEY_STORE_PASSWORD"
              valueFrom:
                secretKeyRef:
                  key: keystore-password
                  name: {{ .Release.Name }}-history-api
            - name: "SPRING_PROFILES_ACTIVE"
              value: "{{ .Values.history_api.profile }}"
            - name: "TEMPORAL_NAMESPACE"
              value: "{{ .Values.history_api.temporalNamespace }}"
          volumeMounts:
            - mountPath: /certs/
              name: keystore
              readOnly: true
      volumes:
        - name: keystore
          secret:
            secretName: {{ .Release.Name }}-history-api-ssl
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-web-portal-bff-api
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}-web-portal-bff-api
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-web-portal-bff-api
        release: {{ .Release.Name }}
    spec:
      containers:
        - name: {{ .Release.Name }}-web-portal-bff-api
          image: "{{ .Values.web_bff.repository }}:{{ .Values.web_bff.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - containerPort: 3000
          envFrom:
             - secretRef:
                    name: {{ .Release.Name }}-web-portal-bff-env
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-web-portal
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}-web-portal
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-web-portal
        release: {{ .Release.Name }}
    spec:
      containers:
        - name: {{ .Release.Name }}-web-portal
          image: "{{ .Values.web_portal.repository }}:{{ .Values.web_portal.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - containerPort: 3000
          env:
            - name: VITE_REACT_APP_ENVIRONMENT
              value: "server"
            - name: BFF_API_URL
              value: "https://{{ .Release.Name }}-web-portal-bff-service.{{.Release.Namespace}}.svc.cluster.local:3000"
            - name: SSL_VERIFICATION
              value: "{{ .Values.web_portal.verifyHttps }}"
          envFrom:
            - secretRef:
                name: {{ .Release.Name }}-web-portal-env
          volumeMounts:
            - mountPath: "/app/dist/config.json"
              name: config
              readOnly: true
              subPath: "config.json"
      volumes:
        - name: config
          configMap:
            name: {{ .Release.Name }}-web-portal-config
---
# Adapted from: https://github.com/kubernetes/examples/blob/master/staging/selenium/selenium-hub-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-selenium-hub
  labels:
    app: {{ .Release.Name }}-selenium-hub
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Release.Name }}-selenium-hub
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-selenium-hub
    spec:
      containers:
        - name: selenium-hub
          image: seleniarm/hub:4.19.1
          ports:
            - containerPort: 4444
            - containerPort: 4443
            - containerPort: 4442
          resources:
            limits:
              memory: "1000Mi"
              cpu: ".5"
          livenessProbe:
            httpGet:
              path: /wd/hub/status
              port: 4444
            initialDelaySeconds: 30
            timeoutSeconds: 5
          readinessProbe:
            httpGet:
              path: /wd/hub/status
              port: 4444
            initialDelaySeconds: 30
            timeoutSeconds: 5
---
# Adapted from: https://github.com/kubernetes/examples/blob/master/staging/selenium/selenium-node-chrome-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-selenium-node-chrome
  labels:
    app: {{ .Release.Name }}-selenium-node-chrome
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Release.Name }}-selenium-node-chrome
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-selenium-node-chrome
    spec:
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
      containers:
        - name: selenium-node-chrome
          image: seleniarm/node-chromium:121.0
          ports:
            - containerPort: 5555
          volumeMounts:
            - mountPath: /dev/shm
              name: dshm
          env:
            - name: SE_EVENT_BUS_HOST
              value: "{{ .Release.Name }}-selenium-hub"
            - name: SE_EVENT_BUS_SUBSCRIBE_PORT
              value: "4443"
            - name: SE_EVENT_BUS_PUBLISH_PORT
              value: "4442"
            - name: "SCREEN_WIDTH"
              value: "1920"
            - name: "SCREEN_HEIGHT"
              value: "1080"
