# Default values for helm.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1
image:
  pullPolicy: Always
useAwsKubernetesSecret: false # Set to true for local kubernetes testing, false for EKS - this is managed through IAM roles.

temporal:
  server:
    worker:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: nodegroup
                operator: In
                values:
                - "on_demand_nodes"
                - "spot_nodes"
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 10
              preference:
                matchExpressions:
                  - key: nodegroup
                    operator: In
                    values:
                      - "on_demand_nodes"
            - weight: 1
              preference:
                matchExpressions:
                  - key: nodegroup
                    operator: In
                    values:
                      - "spot_nodes"

    history:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: nodegroup
                operator: In
                values:
                - "on_demand_nodes"
                - "spot_nodes"
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 10
              preference:
                matchExpressions:
                  - key: nodegroup
                    operator: In
                    values:
                      - "on_demand_nodes"
            - weight: 1
              preference:
                matchExpressions:
                  - key: nodegroup
                    operator: In
                    values:
                      - "spot_nodes"

    frontend:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: nodegroup
                    operator: In
                    values:
                      - "on_demand_nodes"
                      - "spot_nodes"
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 10
              preference:
                matchExpressions:
                  - key: nodegroup
                    operator: In
                    values:
                      - "on_demand_nodes"
            - weight: 1
              preference:
                matchExpressions:
                  - key: nodegroup
                    operator: In
                    values:
                      - "spot_nodes"

    matching:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: nodegroup
                operator: In
                values:
                - "on_demand_nodes"
                - "spot_nodes"
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 10
              preference:
                matchExpressions:
                  - key: nodegroup
                    operator: In
                    values:
                      - "on_demand_nodes"
            - weight: 1
              preference:
                matchExpressions:
                  - key: nodegroup
                    operator: In
                    values:
                      - "spot_nodes"


    config:
      persistence:
        default:
          driver: "sql"

          sql:
            driver: "postgres"
            host: temporal-eu-west-1-dev.cluster-cq6ujr7evasm.eu-west-1.rds.amazonaws.com
            port: 5432
            # for a production deployment use this instead of `password` and provision the secret beforehand e.g. with a sealed secret
            # it has a single key called `password`
            existingSecret: temporal-db-password
            maxConns: 20
            maxConnLifetime: "1h"
            # tls:
            #  enabled: true
            #  enableHostVerification: true
            #  serverName: _HOST_ # this is strictly required when using serverless CRDB offerings

        visibility:
          driver: "sql"

          sql:
            driver: "postgres"
            host: temporal-eu-west-1-dev.cluster-cq6ujr7evasm.eu-west-1.rds.amazonaws.com
            port: 5432
            database: temporal_visibility

            # for a production deployment use this instead of `password` and provision the secret beforehand e.g. with a sealed secret
            # it has a single key called `password`
            existingSecret: temporal-db-password
            maxConns: 20
            maxConnLifetime: "1h"
            # tls:
            #  enabled: true
            #  enableHostVerification: true
            #  serverName: _HOST_ # this is strictly required when using serverless CRDB offerings

  admintools:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchExpressions:
            - key: nodegroup
              operator: In
              values:
              - "spot_nodes"


  web:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchExpressions:
            - key: nodegroup
              operator: In
              values:
              - "spot_nodes"

  cassandra:
    enabled: false

  mysql:
    enabled: false

  postgresql:
    enabled: true


  prometheus:
    enabled: false

  grafana:
    enabled: false

  elasticsearch:
    enabled: false

  schema:
    setup:
      enabled: true
    update:
      enabled: true

communication_worker:
  repository: cameronward/communication-worker
  tag: 0.3.0
  debug: info
  springDebug: info
  sslVerification: false
  temporal:
    taskQueue: communication-worker
    namespace: default

email_gateway:
  repository: cameronward/email-gateway
  tag: 0.1.0
  region: eu-west-1
  loggingLevel: INFO
  rootLoggingLevel: INFO
  profile: ssl
  keyStorePath: /certs/email-gateway.p12

sms_gateway:
  repository: cameronward/sms-gateway
  twilioPollingInterval: 5
  maximumPollingAttempts: 10
  tag: 0.1.1
  region: eu-west-1
  profile: ssl
  keyStorePath: /certs/sms-gateway.p12
  loggingLevel: INFO

gateway_api:
  repository: cameronward/gateway-api
  tag: 0.2.0
  region: eu-west-1
  loggingLevel: INFO
  keyStorePath: /certs/gateway-api.p12
  verifyHostnames: false

preferences_api:
  repository: cameronward/preferences-api
  tag: latest
  region: eu-west-1
  loggingLevel: DEBUG
  profile: ssl
  verifyHostnames: false
  clusterNamespace: default
  keyStorePath: /certs/preferences-api.p12

auth_api:
  keyId: "communication-auth-api"
  repository: cameronward/auth-api
  tokenExpiration: 86400
  tag: latest
  region: eu-west-1
  loggingLevel: INFO
  profile: ssl
  keyStorePath: /certs/auth-api.p12

data_converter_api:
  repository: cameronward/data-converter-api
  tag: latest
  loggingLevel: INFO

integration_tests:
  repository: cameronward/cs-integration-tests
  tag: latest
  temporalNamespace: default
  kubernetesNamespace: default
  filterExpression: "@EmailGateway or @GatewayAPI or @PreferencesAPI or @InvalidGateway or @DataConverterAPI"

PreferencesDefaults:
  GatewayTimeoutSeconds: "60"
  RetryPolicy: >-
    { "maximumAttempts": "100", "backoffCoefficient": 2, "initialInterval":
    "PT1S", "maximumInterval": "PT100S", "startToCloseTimeout": "PT10S" }
