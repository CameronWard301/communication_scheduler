openapi: 3.1.0

info:
  title: Communication API
  description: Communication API
  version: 1.0.3

tags:
  - name: Authentication API
    description: Authentication API for retrieving tokens
  - name: Communication Gateway API
    description: Manage Communication Gateways
  - name: Schedule API
    description: Manage Communication Schedules
  - name: Preferences API
    description: Manage Communication Preferences
  - name: History API
    description: Query previous communications and status

servers:
  - url: http://localhost:8000/v1
    description: Local development server

paths:
  /auth/.well-known/jwks.json:
    get:
      tags:
        - Authentication API
      summary: Get the public encryption key for verifying a token
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type:
                  - object
                properties:
                  keys:
                    type:
                      - array
                    items:
                      type: object
                      properties:
                        kty:
                          type: string
                          examples:
                            - RSA
                        e:
                          type: string
                          examples:
                            - AQAB
                        use:
                          type: string
                          examples:
                            - sig
                        kid:
                          type: string
                          examples:
                            - communication-auth-api
                        alg:
                          type: string
                          examples:
                            - RS512
                        n:
                          type: string
                          examples:
                            - public_key
  /auth:

    post:
      tags:
        - Authentication API
      summary: Get a JWT token for the given scopes
      operationId: getJwtToken
      requestBody:
        description: Scopes to request
        required: true
        content:
          application/json:
            schema:
              type:
                - array
              items:
                type:
                  - string
              examples:
                - ["GATEWAY:READ", "GATEWAY:WRITE"]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type:
                  - object
                properties:
                  token:
                    type:
                      - string
                  expires:
                    type:
                      - string
                    format: date-time
        '400':
          description: Bad Request
        '401':
          description: Unauthorised
        '403':
          description: Forbidden

  /gateway:
    get:
      tags:
        - Communication Gateway API
      summary: Get all communication gateways
      operationId: getCommunicationGateways
      description: requires GATEWAY:READ scope
      security:
        - bearerAuth: ["GATEWAY:READ"]
      parameters:
        - name: pageNumber
          in: query
          description: The page number to retrieve
          schema:
            type:
              - integer
            default:
              0
        - name: pageSize
          in: query
          description: The number of items per page
          schema:
            type:
              - integer
            default:
              25
        - name: friendlyName
          in: query
          description: The friendly name to search for
          schema:
            type:
              - string
        - name: endpointUrl
          in: query
          description: The endpointUrl to search for
          schema:
            type:
              - string
        - name: description
          in: query
          description: The description to search for
          schema:
            type:
              - string
        - name: sort
          in: query
          description: The field name to sort by
          schema:
            type:
              - string
        - name: sortDirection
          in: query
          description: Sort by either "asc" or "desc"
          schema:
            type:
              - string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type:
                  - object
                properties:
                  totalPages:
                    type:
                      - integer
                  totalElements:
                    type:
                      - integer
                  first:
                    type:
                      - boolean
                  last:
                    type:
                      - boolean
                  empty:
                    type:
                      - boolean
                  content:
                    type:
                      - array
                    items:
                      $ref: '#/components/schemas/CommunicationGateway'
                  pageable:
                    type:
                      - object
                    $ref: '#/components/schemas/Pageable'
        '401':
          description: Unauthorised
        '403':
          description: Forbidden
    post:
      tags:
        - Communication Gateway API
      summary: Create a communication gateway
      operationId: createCommunicationGateway
      description: requires GATEWAY:WRITE scope
      security:
        - bearerAuth: [ "GATEWAY:WRITE" ]
      requestBody:
        description: Communication gateway to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCommunicationGateway'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommunicationGateway'
        '400':
          description: Bad Request
        '401':
          description: Unauthorised
        '403':
          description: Forbidden
        '409':
          description: Conflict
    put:
      tags:
        - Communication Gateway API
      summary: Update a communication gateway
      operationId: updateCommunicationGateway
      description: requires GATEWAY:WRITE scope
      security:
        - bearerAuth: [ "GATEWAY:WRITE" ]
      requestBody:
        description: Communication gateway to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommunicationGateway'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommunicationGateway'
        '400':
          description: Bad Request
        '401':
          description: Unauthorised
        '403':
          description: Forbidden
        '404':
          description: Not Found


  /gateway/{gatewayId}:
    get:
      tags:
        - Communication Gateway API
      summary: Get gateway by ID
      operationId: getCommunicationGatewayById
      description: requires GATEWAY:READ scope
      security:
        - bearerAuth: [ "GATEWAY:READ" ]
      parameters:
        - name: gatewayId
          in: path
          description: ID of the communication gateway to return
          required: true
          schema:
            type:
              - string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CommunicationGateway'
        '401':
          description: Unauthorised
        '403':
          description: Forbidden
        '404':
          description: Not Found
    delete:
      tags:
        - Communication Gateway API
      summary: Delete a communication gateway
      operationId: deleteCommunicationGateway
      description: requires GATEWAY:DELETE scope
      security:
        - bearerAuth: [ "GATEWAY:DELETE" ]
      parameters:
        - name: gatewayId
          in: path
          description: ID of the communication gateway to delete
          required: true
          schema:
            type:
              - string
            format: uuid
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
        '401':
          description: Unauthorised
        '403':
          description: Forbidden

  /schedule:
    post:
      tags:
        - Schedule API
      summary: Create a new communication schedule
      operationId: createCommunicationSchedule
      description: requires SCHEDULE:WRITE scope
      security:
        - bearerAuth: [ "SCHEDULE:WRITE" ]
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - type:
                    - object
                  properties:
                    gatewayId:
                      type:
                        - string
                      format: uuid
                    userId:
                      type:
                        - string
                      format: uuid
                    paused:
                      type:
                        - boolean
                      default: false
                  required:
                    - gatewayId
                    - userId
              oneOf:
                - $ref: '#/components/schemas/CreateCommunicationScheduleCalendar'
                - $ref: '#/components/schemas/CreateCommunicationScheduleInterval'
                - $ref: '#/components/schemas/CreateCommunicationScheduleCron'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScheduleDescriptionDTO'
        '400':
          description: Bad Request
        '401':
          description: Unauthorised
        '403':
          description: Forbidden
        '409':
          description: Conflict - already exists

    put:
      tags:
        - Schedule API
      summary: Updates an existing communication schedule
      operationId: updateCommunicationSchedule
      description: requires SCHEDULE:WRITE scope
      security:
        - bearerAuth: [ "SCHEDULE:WRITE" ]
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - type:
                    - object
                  properties:
                    scheduleId:
                      type:
                        - string
                      format: uuid
                    gatewayId:
                      type:
                        - string
                      format: uuid
                    userId:
                      type:
                        - string
                      format: uuid
                    paused:
                      type:
                        - boolean
                      default: false
                  required:
                    - scheduleId
              oneOf:
                - $ref: '#/components/schemas/CreateCommunicationScheduleCalendar'
                - $ref: '#/components/schemas/CreateCommunicationScheduleInterval'
                - $ref: '#/components/schemas/CreateCommunicationScheduleCron'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScheduleDescriptionDTO'

        '400':
          description: Bad Request
        '401':
          description: Unauthorised
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '409':
          description: Conflict - already exists
    patch:
      tags:
        - Schedule API
      summary: Batch update communication schedules
      operationId: batchUpdateCommunicationSchedules
      description: requires SCHEDULE:WRITE scope. Can modify the gatewayId or status for gateways matching the provided filter
      security:
        - bearerAuth: [ "SCHEDULE:WRITE" ]
      parameters:
        - name: userId
          in: query
          description: Filter by the userId that the schedule belongs to
          schema:
            type:
              - string
        - name: gatewayId
          in: query
          description: Filter by the gatewayId that the schedule uses
          schema:
            type:
              - string
      requestBody:
        description: JSON object containing the updates for schedules
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                paused:
                  type: string
                  description: New paused status for schedules
                  examples:
                    - true
                    - false
                gatewayId:
                  type: string
                  description: New gatewayId for schedules

      responses:
        '200':
          description: Completed Update
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    examples:
                      - "Completed"
                  totalModified:
                    type: integer
        '400':
          description: Bad Request
        '401':
          description: Unauthorised
        '403':
          description: Forbidden

    get:
      tags:
        - Schedule API
      summary: Get all communication schedules or query with a filter
      operationId: getCommunicationSchedules
      description: requires SCHEDULE:READ scope
      security:
        - bearerAuth: [ "SCHEDULE:READ" ]
      parameters:
        - name: pageNumber
          in: query
          description: The page number to retrieve
          schema:
            type:
              - integer
            default:
              0
        - name: pageSize
          in: query
          description: The number of items per page
          schema:
            type:
              - integer
            default:
              50
        - name: userId
          in: query
          description: Filter by the userId that the schedule belongs to
          schema:
            type:
              - string
        - name: gatewayId
          in: query
          description: Filter by the gatewayId that the schedule uses
          schema:
            type:
              - string

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - type:
                      - object
                    properties:
                      total:
                        type:
                          - integer
                      content:
                        type:
                          - array
                        items:
                          $ref: '#/components/schemas/ScheduleListDescriptionDTO'
                      pageable:
                        type:
                          - object
                        $ref: '#/components/schemas/Pageable'
                  - $ref: '#/components/schemas/PageInfo'
        '401':
          description: Unauthorised
        '403':
          description: Forbidden
    delete:
      tags:
        - Schedule API
      summary: Delete all communication schedules matching the given filter
      operationId: deleteCommunicationSchedulesByFilter
      description: requires SCHEUDLE:DELETE scope. Note that not providing a filter will not delete any schedules.
      security:
        - bearerAuth: [ "SCHEDULE:DELETE" ]
      parameters:
        - name: userId
          in: query
          description: The schedules that belong to the provided userId
          schema:
            type:
              - string
        - name: gatewayId
          in: query
          description: The schedules to that use the given gatewayId
          schema:
            type:
              - string
      responses:
        '204':
          description: No Content
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  totalModified:
                    type: integer
        '404':
          description: Not Found
        '401':
          description: Unauthorised
        '403':
          description: Forbidden

  /schedule/count:
    get:
      tags:
        - Schedule API
      summary: Get the number of schedules that match the filter
      operationId: getCommunicationSchedulesCount
      description: requires SCHEDULE:READ scope. Useful to see how many will be selected when performing batch delete or modify operations
      security:
        - bearerAuth: [ "SCHEDULE:READ" ]
      parameters:
        - name: userId
          in: query
          description: Filter by the userId that the schedule belongs to
          schema:
            type:
              - string
        - name: gatewayId
          in: query
          description: Filter by the gatewayId that the schedule uses
          schema:
            type:
              - string

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type:
                  - object
                properties:
                  total:
                    type:
                      - integer
        '401':
          description: Unauthorised
        '403':
          description: Forbidden
  /schedule/{scheduleId}:
    delete:
      tags:
        - Schedule API
      summary: Delete an existing communication schedule by id
      operationId: deleteCommunicationSchedule
      description: requires SCHEDULE:DELETE scope
      security:
        - bearerAuth: [ "SCHEDULE:DELETE" ]
      parameters:
        - name: scheduleId
          in: path
          required: true
          schema:
            type:
              - string
            format: uuid
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorised
        '403':
          description: Forbidden
        '404':
          description: Not Found
    get:
      tags:
        - Schedule API
      summary: Get communication schedule by scheduleId
      operationId: getCommunicationSchedulesByScheduleId
      description: requires SCHEDULE:READ scope
      security:
        - bearerAuth: [ "SCHEDULE:READ" ]
      parameters:
        - name: scheduleId
          in: path
          description: The schedules to retrieve by scheduleId
          schema:
            type:
              - integer
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScheduleDescriptionDTO'
        '401':
          description: Unauthorised
        '403':
          description: Forbidden
        '404':
          description: Not Found

  /preferences:
    get:
      tags:
        - Preferences API
      summary: Get the preferences policy for communications
      operationId: getPreferences
      description: requires PREFERENCES:READ scope
      security:
        - bearerAuth: [ "PREFERENCES:READ" ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Preferences'
        '401':
          description: Unauthorised
        '403':
          description: Forbidden
  /preferences/retry-policy:
    put:
      tags:
        - Preferences API
      summary: Update the retry policy for communications
      operationId: updateRetryPolicy
      description: requires PREFERENCES:WRITE scope
      security:
        - bearerAuth: [ "PREFERENCES:WRITE" ]
      requestBody:
        $ref: '#/components/schemas/RetryPolicy'

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetryPolicy'
        '400':
          description: Bad Request
        '401':
          description: Unauthorised
        '403':
          description: Forbidden
  /preferences/gateway-timeout:
    put:
      tags:
        - Preferences API
      summary: Update the gateway timeout value
      operationId: updateGatewayTimeout
      description: requires PREFERENCES:WRITE scope
      security:
        - bearerAuth: [ "PREFERENCES:WRITE" ]
      requestBody:
        content:
          application/json:
            schema:
              type:
                - object
              properties:
                gatewayTimeoutSeconds:
                  type:
                    - integer
                  examples:
                    - 60
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type:
                  - object
                properties:
                  gatewayTimeoutSeconds:
                    type:
                      - integer
                    examples:
                      - 60
        '400':
          description: Bad Request
        '401':
          description: Unauthorised
        '403':
          description: Forbidden

  /workflow/{workflowId}/{runId}:
    get:
      tags:
        - History API
      summary: Get the workflow by its Id
      operationId: getCommunicationWorkflowById
      description: requires HISTORY:READ scope
      security:
        - bearerAuth: [ "HISTORY:READ" ]
      parameters:
        - name: workflowId
          required: true
          in: path
          description: The runId to search for
          schema:
            type:
              - integer
        - name: runId
          required: true
          in: path
          description: The runId to search for
          schema:
            type:
              - integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type:
                  - object
                $ref: '#/components/schemas/CommunicationWorkflow'
        '400':
          description: Bad Request
        '401':
          description: Unauthorised
        '403':
          description: Forbidden
    delete:
      tags:
        - History API
      summary: Terminate an existing communication Workflow
      description: requires WORKFLOW:TERMINATE scope
      security:
        - bearerAuth: [ "WORKFLOW:TERMINATE" ]
      parameters:
        - name: workflowId
          in: path
          description: Workflow ID of the workflow to terminate
          required: true
          schema:
            type:
              - string
            format: uuid
        - name: runId
          in: path
          description: Run ID of the workflow to terminate
          required: true
          schema:
            type:
              - string
            format: uuid
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
        '401':
          description: Unauthorised
        '403':
          description: Forbidden
  /workflow:
    get:
      tags:
        - History API
      summary: Get the previous communication workflows by status, userId or gatewayId
      operationId: getPreviousCommunications
      description: requires HISTORY:READ scope
      security:
        - bearerAuth: [ "HISTORY:READ" ]
      parameters:
        - name: userId
          in: query
          description: The userId
          schema:
            type:
              - string
        - name: gatewayId
          in: query
          description: The gatewayId
          schema:
            type:
              - string
        - name: scheduleId
          in: query
          description: The scheduleId
          schema:
            type:
              - string
        - name: status
          in: query
          description: The integer representing the temporal status
          schema:
            type:
              - integer
            default:
              0
        - name: pageNumber
          in: query
          description: The page number to retrieve
          schema:
            type:
              - string
            default:
              0
        - name: pageSize
          in: query
          description: The number of items per page
          schema:
            type:
              - string
            default:
              50
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type:
                  - object
                properties:
                  total:
                    type:
                      - number
                  content:
                    type:
                      - array
                    items:
                      $ref: '#/components/schemas/CommunicationWorkflow'
                  pageable:
                    type:
                      - object
                    $ref: '#/components/schemas/Pageable'
        '400':
          description: Bad Request
        '401':
          description: Unauthorised
        '403':
          description: Forbidden
  /workflow/total:
    get:
      tags:
        - History API
      summary: Get the total number of workflows that match the query
      operationId: getCommunicationWorkflowTotalByQuery
      description: requires history:read scope
      security:
        - bearerAuth: [ "history:read" ]
      parameters:
        - name: userId
          in: query
          description: The userId
          schema:
            type:
              - string
        - name: gatewayId
          in: query
          description: The gatewayId
          schema:
            type:
              - string
        - name: scheduleId
          in: query
          description: The scheduleId
          schema:
            type:
              - string
        - name: status
          in: query
          description: The integer ENUM value representing the temporal status
          schema:
            type:
              - integer
            default:
              0
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type:
                  - object
                properties:
                  total:
                    type:
                      - number
        '400':
          description: Bad Request
        '401':
          description: Unauthorised
        '403':
          description: Forbidden


components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT


  schemas:
    CommunicationWorkflow:
      type:
        - object
      properties:
        id:
          description: ID of workflow
          type:
            - string
          examples:
            - "cs1-sms-2023-10-26T11:40:30Z"
        userId:
          description: ID of the user
          type:
            - string
          format: uuid
        gatewayId:
          description: ID of the gateway
          type:
            - string
          format: uuid
        scheduleId:
          description: ID of the schedule
          type:
            - string
          format: uuid
        type:
          description: Workflow type
          type:
            - string
          examples:
            - "CommunicationWorkflow"
        startTime:
          description: Time the workflow started
          type:
            - object
          $ref: '#/components/schemas/Timestamp'
        endTime:
          description: Time the workflow ended
          type:
            - object
          $ref: '#/components/schemas/Timestamp'
        taskQueue:
          type:
            - string
        status:
          type:
            - number
          description: ENUM value of the temporal status
          default:
            0

    Preferences:
      type:
        - object
      description: Preferences for the platform
      properties:
        gatewayTimeoutSeconds:
          description: How long to wait for a gateway to respond with a request, Default is 60 seconds
          type:
            - integer
          default: 60
        retryPolicy:
          $ref: '#/components/schemas/RetryPolicy'


    RetryPolicy:
      type:
        - object
      description: Retry policy for communications
      properties:
        maximumAttempts:
          description: 0 means unlimited, otherwise the maximum number of attempts
          type:
            - integer
          default: "100"
        backoffCoefficient:
          description: The backoff coefficient to use for exponential backoff. 1.0 means no backoff and always use the initial interval value.
          type:
            - number
          default: 2.0
        initialInterval:
          description: Amount of time before the first retry. Subsequent retries will also be at this interval if backoff coefficient is set to <= 1.0
          type:
            - string
          format: duration
          default: "PT1S"
        maximumInterval:
          description: Maximum amount of time between retries. The interval will not exceed this value to stop waiting exponentially due to the backoff coefficient.
          type:
            - string
          format: duration
          default: "PT100S"
        startToCloseTimeout:
          description: Maximum amount of time for the workflow to be scheduled and to complete. Set to "PT0S" to disable
          type:
            - string
          format: duration
          default: "PT0S"


    CreateCommunicationGateway:
      required:
        - endpointUrl
        - friendlyName
      type:
        - object
      properties:
        endpointUrl:
          type:
            - string
          format: uri
        friendlyName:
          type:
            - string
        description:
          type:
            - string

    CommunicationGateway:
      required:
        - id
        - endpointUrl
        - friendlyName
      allOf:
        - type:
            - object
          properties:
            id:
              type:
                - string
              format: uuid
        - $ref: '#/components/schemas/CreateCommunicationGateway'

    CreateCommunicationScheduleCron:
      type: object
      allOf:
        - type:
            - object
          properties:
            cronExpression:
              type: string
              examples:
                - "0 12 * * MON"

    CreateCommunicationScheduleCalendar:
      allOf:
        - type: object
          properties:
            calendar:
              $ref: '#/components/schemas/CalendarSpec'

    CreateCommunicationScheduleInterval:
      allOf:
        - type: object
          properties:
            interval:
              $ref: '#/components/schemas/IntervalSpec'

    ScheduleDescriptionDTO:
      type:
        - object
      properties:
        scheduleId:
          type:
            - string
          format: uuid
        info:
          type:
            - object
          properties:
            numActions:
              type: number
            numActionsMissedCatchupWindow:
              type: number
            numActionsSkippedOverlap:
              type: number
            runningActions:
              type:
                - array
              items:
                $ref: '#/components/schemas/ScheduleActionResult'
            recentActions:
              type:
                - array
              items:
                $ref: '#/components/schemas/ScheduleActionResult'
            nextActionTimes:
              type:
                - array
              items:
                type:
                  - string
                format: date-time
            createdAt:
              type: string
              format: date-time
            lastUpdatedAt:
              type: string
              format: date-time
        schedule:
          type: object
          properties:
            state:
              type: object
              properties:
                note:
                  type: string
                paused:
                  type: boolean
                limitedAction:
                  type: boolean
                remainingActions:
                  type: integer
            spec:
              type: object
              properties:
                intervals:
                  type: array
                  items:
                    $ref: '#/components/schemas/IntervalSpec'
                calendars:
                  type: array
                  items:
                    $ref: '#/components/schemas/CalendarSpec'
                cronExpressions:
                  type: array
                  items:
                    type: string
                    examples:
                      - "0 12 * * MON"
        searchAttributes:
          type: object
          properties:
            userId:
              type: array
              items:
                type: string
                format: uuid
            gatewayId:
              type: array
              items:
                type: string
                format: uuid
            scheduleId:
              type: array
              items:
                type: string
                format: uuid

    ScheduleListDescriptionDTO:
      type:
        - object
      properties:
        scheduleId:
          type:
            - string
          format: uuid
        info:
          type:
            - object
          properties:
            numActions:
              type: number
            numActionsMissedCatchupWindow:
              type: number
            numActionsSkippedOverlap:
              type: number
            runningActions:
              type:
                - array
              items:
                $ref: '#/components/schemas/ScheduleActionResult'
            recentActions:
              type:
                - array
              items:
                $ref: '#/components/schemas/ScheduleActionResult'
            nextActionTimes:
              type:
                - array
              items:
                type:
                  - string
                format: date-time
        schedule:
          type: object
          properties:
            state:
              type: object
              properties:
                note:
                  type: string
                paused:
                  type: boolean
                limitedAction:
                  type: boolean
                remainingActions:
                  type: integer
            spec:
              type: object
              properties:
                intervals:
                  type: array
                  items:
                    $ref: '#/components/schemas/IntervalSpec'
                calendars:
                  type: array
                  items:
                    $ref: '#/components/schemas/CalendarSpec'
                cronExpressions:
                  type: array
                  items:
                    type: string
                    examples:
                      - "0 12 * * MON"
        searchAttributes:
          type: object
          properties:
            userId:
              type: array
              items:
                type: string
                format: uuid
            gatewayId:
              type: array
              items:
                type: string
                format: uuid
            scheduleId:
              type: array
              items:
                type: string
                format: uuid


    IntervalSpec:
      type: object
      properties:
        every:
          type: string
          examples:
            - "PT10S"
        offset:
          type: string
          examples:
            - "PT10S"

    CalendarSpec:
      properties:
        seconds:
          type:
            - array
          items:
            $ref: '#/components/schemas/ScheduledRange'
        minutes:
          type:
            - array
          items:
            $ref: '#/components/schemas/ScheduledRange'
        hour:
          type:
            - array
          items:
            $ref: '#/components/schemas/ScheduledRange'
        dayOfMonth:
          type:
            - array
          items:
            $ref: '#/components/schemas/ScheduledRange'
        month:
          type:
            - array
          items:
            $ref: '#/components/schemas/ScheduledRange'
        year:
          type:
            - array
          items:
            $ref: '#/components/schemas/ScheduledRange'
        dayOfWeek:
          type:
            - array
          items:
            $ref: '#/components/schemas/ScheduledRange'
        comment:
          type: string

    ScheduledRange:
      type: object
      properties:
        start:
          type:
            - string
          examples:
            - "0"
        end:
          type:
            - string
          examples:
            - "0"
        step:
          type:
            - string
          examples:
            - "1"

    ScheduleActionResult:
      properties:
        scheduledAt:
          type:
            - string
          format:
            date-time
        runId:
          type:
            - string
          format:
            uuid

    Timestamp:
      properties:
        seconds:
          type:
            - number
          examples:
            - 1698320430
        nanos:
          type:
            - number
          examples:
            - 23592608

    Pageable:
      properties:
        pageNumber:
          type:
            - integer
        pageSize:
          type:
            - integer
        sort:
          type: object
          properties:
            empty:
              type: boolean
            sorted:
              type: boolean
            unsorted:
              type: boolean
        offset:
          type: integer
        paged:
          type: boolean
        empty:
          type: boolean

    PageInfo:
      type: object
      properties:
        last:
          type: boolean
        totalElements:
          type: integer
        totalPages:
          type: integer
        numberOfElements:
          type: integer
        size:
          type: integer
        number:
          type: integer
        sort:
          type: object
          properties:
            empty:
              type: boolean
            sorted:
              type: boolean
            unsorted:
              type: boolean
        first:
          type: boolean
        empty:
          type: boolean
