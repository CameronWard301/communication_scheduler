@startuml Component Interfaces

'component webportalBFFApi {
'
'}

component temporal {
}

() workflowClient
() scheduleClient
() workflowServiceStubs


workflowServiceStubs <|-u- temporal
workflowClient <|-u- temporal
scheduleClient <|-u- temporal

package "Communication APIs" as communicationApis {
    component gatewayApi {

    }

    interface gatewayController {
        + ResponseEntity<Page<Gateways>> getAllGateways(String pageNumber, String pageSize, String friendlyName, String endpointUrl, String description, String sortField, String sortDirection)
        + ResponseEntity<Gateway> createGateway(Gateway gateway, BindingResult bindingResult)
        + ResponseEntity<Gateway> getGatewayById(String id)
        + ResponseEntity<String> deleteGatewayById(String id)
        + Gateway updateGateway(Gateway gateway, BindingResult bindingResult)
    }

    interface gatewayService {
        + Page<Gateways> getGateways(String pageNumber, String pageSize, String friendlyName, String endpointUrl, String description, String sortField, String sortDirection)
        + Gateway createGateway(Gateway gateway)
        + Gateway updateGateway(Gateway gateway)
        + Gateway getGatewayById(String id)
        + void deleteGatewayById(String id)
    }



    interface MongoRepository {
        + Page<T> findAll(Pageable pageable)
        + Iterable<T> findAll(Sort sort)
        + T findById(String id)
        + void deleteById(String id)
    }


    interface gatewayRepository extends MongoRepository {
        + Page<Gateway> findAll(Pageable pageable)
        + Page<Gateway> findByFriendlyNameRegexAndEndpointUrlRegexAndDescriptionRegex(String friendlyName, String dateCreated, String description, Pageable pageable)
    }

    gatewayApi --|> gatewayService
    gatewayApi --|> gatewayRepository
    gatewayApi --|> gatewayController
    gatewayController --> gatewayService
    gatewayService --> gatewayRepository

    component scheduleApi{

    }

    interface scheduleController{
        + ResponseEntity<ScheduleDescriptionDTO> createSchedule(CreateScheduleDTO createScheduleDTO, BindingResult bindingResult)
        + ResponseEntity<ScheduleDescriptionDTO> updateSchedule(CreateScheduleDTO createScheduleDTO, BindingResult bindingResult)
        + ResponseEntity<ModifiedDTO> batchUpdateSchedules(Optional<String> userId, Optional<String> gatewayId, SchedulePatchDTO schedulePatchDTO, BindingResult bindingResult)
        + ResponseEntity<Page<ScheduleListDescription>> getSchedules(String pageNumber, String pageSize, Optional<String> userId, Optional<String> gatewayId)
        + ResponseEntity<ModifiedDTO> batchDeleteSchedules(Optional<String> userId, Optional<String> gatewayId)
        + ResponseEntity<CountDTO> getScheduleNumber(Optional<String> userId, Optional<String> gatewayId)
        + ResponseEntity<String> deleteById(String id)
        + ResponseEntity<ScheduleDescriptionDTO> getScheduleById(String id)
    }

    interface scheduleService {
        + Page<ScheduleListDescription> getAllSchedules(String pageNumber, String pageSize, Optional<String> userId, Optional<String> gatewayId)
        + ScheduleDescriptionDTO createSchedule(CreateScheduleDTO createScheduleDTO)
        + ScheduleDescriptionDTO updateSchedule(CreateScheduleDTO scheduleDTO)
        + ModifiedDTO batchUpdateSchedules(Optional<String> userId, Optional<String> gatewayId, SchedulePatchDTO schedulePatchDTO)
        + ScheduleDescriptionDTO getScheduleById(String scheduleId)
        + void deleteScheduleById(String scheduleId)
        + CountDTO getScheduleCount (Optional<String> userId, Optional<String> gatewayId)
        + ModifiedDTO deleteSchedulesByFilter(Optional<String> userId, Optional<String> gatewayId)
        - RuntimeException handleScheduleException(ScheduleException e, String scheduleId)
    }


    scheduleApi --|> scheduleService : Realises
    scheduleApi --|> scheduleController : Realises
    scheduleController --> scheduleService : Uses

    component historyApi {

    }

    interface historyController {
        + ResponseEntity<Page<WorkflowExecutionDTO>> getWorkflows(Optional<String> userId, Optional<String> gatewayId, Integer status, String PageNumber, String pageSize)
        + ResponseEntity<WorkflowExecutionDTO> getWorkflow(String workflowId, String runId)
        + ResponseEntity<Void> terminateWorkflow(String workflowId, String runId)
        + ResponseEntity<TotalDTO> getTotalWorkflows(Optional<String> userId, Optional<String> gatewayId, Optional<String> scheduleId, Integer status)
    }


    interface historyService {
        + Page<WorkflowExecutionDTO> getWorkflows(Optional<String> userId, Optional<String> gatewayId, Optional<String> scheduleId, Integer status, String PageNumber, String pageSize)
        + WorkflowExecutionDTO getWorkflowById(String id, String runId)
        + void terminateWorkflow(String id, String runId)
        + TotalDTO getTotalWorkflows(Optional<String> userId, Optional<String> gatewayId, Optional<String> scheduleId, Integer status)
        - String getWorkflowQueryString(Optional<String> userId, Optional<String> gatewayId, Optional<String> scheduleId, Integer status)
    }

    historyApi --|> historyService
    historyApi --|> historyController
    historyController --> historyService

    component preferencesApi {

    }

    interface preferencesController {
        + ResponseEntity<Preferences> getPreferences()
        + ResponseEntity<RetryPolicy> setRetryPolicy(RetryPolicy retryPolicy, BindingResult bindingResult)
        + ResponseEntity<GatewayTimeout> setGatewayTimeout(GatewayTimeout gatewayTimeout, BindingResult bindingResult)
    }

    interface preferencesService {
        + Preferences getPreferences()
        + RetryPolicy setRetryPolicy(RetryPolicy retryPolicy)
        + GatewayTimeout setGatewayTimeoutSeconds(GatewayTimeout gatewayTimeout)
    }

    preferencesApi --|> preferencesService
    preferencesApi --|> preferencesController
    preferencesController --> preferencesService

    component authApi {

    }

    interface authController {
        + ResponseEntity<JwtDTO> getJwt(List<String> scopes)
        + ResponseEntity<Mao<String, Object>> getKey()
    }

    interface authService {
        + JwtDTO generateJWT(List<String> scopes)
        + Map<String, Object> getJwks()
    }

    authApi --|> authService
    authApi --|> authController
    authController --> authService

}


scheduleClient <-- scheduleApi
workflowClient <-- historyApi
@enduml
