@startuml Component Interfaces

component webportalBFFApi {

}


package "Communication APIs" as communicationApis {
    component gatewayApi {

    }

    interface gatewayController {
            + ResponseEntity<Page<Gateways>> getAllGateways(String pageNumber, String pageSize, String friendlyName, String endpointUrl, String description, String sortField, String sortDirection)
            + ResponseEntity<Gateway> createGateway(Gateway gateway, BindingResult bindingResult)
            + ResponseEntity<Gateway> getGatewayById(String id)
            + ResponseEntity<String> deleteGatewayById(String id)
            + Gateway updateGateway(Gateway gateway, BindingResult bindingResult)
        }

    interface gatewayService {
        + Page<Gateways> getGateways(String pageNumber, String pageSize, String friendlyName, String endpointUrl, String description, String sortField, String sortDirection)
        + Gateway createGateway(Gateway gateway)
        + Gateway updateGateway(Gateway gateway)
        + Gateway getGatewayById(String id)
        + void deleteGatewayById(String id)
    }

    interface MongoRepository {
        + Page<T> findAll(Pageable pageable)
        + Iterable<T> findAll(Sort sort)
        + T findById(String id)
        + void deleteById(String id)
    }


    interface gatewayRepository extends MongoRepository {
        + Page<Gateway> findByFriendlyNameRegexAndEndpointUrlRegexAndDescriptionRegex(String friendlyName, String dateCreated, String description, Pageable pageable)
    }

    gatewayApi --|> gatewayService
    gatewayApi --|> gatewayRepository
    gatewayApi --|> gatewayController
    gatewayController --> gatewayService
    gatewayService --> gatewayRepository

    component preferencesApi {

    }

    interface preferencesController {
        + ResponseEntity<Preferences> getPreferences()
        + ResponseEntity<RetryPolicy> setRetryPolicy(RetryPolicy retryPolicy, BindingResult bindingResult)
        + ResponseEntity<GatewayTimeout> setGatewayTimeout(GatewayTimeout gatewayTimeout, BindingResult bindingResult)
    }

    interface preferencesService {
        + Preferences getPreferences()
        + RetryPolicy setRetryPolicy(RetryPolicy retryPolicy)
        + GatewayTimeout setGatewayTimeoutSeconds(GatewayTimeout gatewayTimeout)
    }

    preferencesApi --|> preferencesService
    preferencesApi --|> preferencesController
    preferencesController --> preferencesService

    component authApi {

    }

    interface authController {
        + ResponseEntity<JwtDTO> getJwt(List<String> scopes)
        + ResponseEntity<Mao<String, Object>> getKey()
    }

    interface authService {
        + JwtDTO generateJWT(List<String> scopes)
        + Map<String, Object> getJwks()
    }

    authApi --|> authService
    authApi --|> authController
    authController --> authService


}


webportalBFFApi -d--> gatewayController
webportalBFFApi -d---> preferencesController
webportalBFFApi -d---> authController
@enduml
