@startuml Component Interfaces

component webportalBFFApi {

}

component temporal {
}

() workflowClient
() scheduleClient
() workflowServiceStubs


workflowServiceStubs <|-u- temporal
workflowClient <|-u- temporal
scheduleClient <|-u- temporal

package "Communication APIs" as communicationApis {

    component scheduleApi{

    }

    interface scheduleController{
            + ResponseEntity<ScheduleDescriptionDTO> createSchedule(CreateScheduleDTO createScheduleDTO, BindingResult bindingResult)
            + ResponseEntity<ScheduleDescriptionDTO> updateSchedule(CreateScheduleDTO createScheduleDTO, BindingResult bindingResult)
            + ResponseEntity<ModifiedDTO> batchUpdateSchedules(Optional<String> userId, Optional<String> gatewayId, SchedulePatchDTO schedulePatchDTO, BindingResult bindingResult)
            + ResponseEntity<Page<ScheduleListDescription>> getSchedules(String pageNumber, String pageSize, Optional<String> userId, Optional<String> gatewayId)
            + ResponseEntity<ModifiedDTO> batchDeleteSchedules(Optional<String> userId, Optional<String> gatewayId)
            + ResponseEntity<CountDTO> getScheduleNumber(Optional<String> userId, Optional<String> gatewayId)
            + ResponseEntity<String> deleteById(String id)
            + ResponseEntity<ScheduleDescriptionDTO> getScheduleById(String id)
        }

    interface scheduleService {
        + Page<ScheduleListDescription> getAllSchedules(String pageNumber, String pageSize, Optional<String> userId, Optional<String> gatewayId)
        + ScheduleDescriptionDTO createSchedule(CreateScheduleDTO createScheduleDTO)
        + ScheduleDescriptionDTO updateSchedule(CreateScheduleDTO scheduleDTO)
        + ModifiedDTO batchUpdateSchedules(Optional<String> userId, Optional<String> gatewayId, SchedulePatchDTO schedulePatchDTO)
        + ScheduleDescriptionDTO getScheduleById(String scheduleId)
        + void deleteScheduleById(String scheduleId)
        + CountDTO getScheduleCount (Optional<String> userId, Optional<String> gatewayId)
        + ModifiedDTO deleteSchedulesByFilter(Optional<String> userId, Optional<String> gatewayId)
        - RuntimeException handleScheduleException(ScheduleException e, String scheduleId)
    }


    scheduleApi --|> scheduleService : Realises
    scheduleApi --|> scheduleController : Realises
    scheduleController --> scheduleService : Uses

    component historyApi {

    }

    interface historyController {
        + ResponseEntity<Page<WorkflowExecutionDTO>> getWorkflows(Optional<String> userId, Optional<String> gatewayId, Integer status, String PageNumber, String pageSize)
        + ResponseEntity<WorkflowExecutionDTO> getWorkflow(String workflowId, String runId)
        + ResponseEntity<Void> terminateWorkflow(String workflowId, String runId)
        + ResponseEntity<TotalDTO> getTotalWorkflows(Optional<String> userId, Optional<String> gatewayId, Optional<String> scheduleId, Integer status)
    }


    interface historyService {
        + Page<WorkflowExecutionDTO> getWorkflows(Optional<String> userId, Optional<String> gatewayId, Optional<String> scheduleId, Integer status, String PageNumber, String pageSize)
        + WorkflowExecutionDTO getWorkflowById(String id, String runId)
        + void terminateWorkflow(String id, String runId)
        + TotalDTO getTotalWorkflows(Optional<String> userId, Optional<String> gatewayId, Optional<String> scheduleId, Integer status)
        - String getWorkflowQueryString(Optional<String> userId, Optional<String> gatewayId, Optional<String> scheduleId, Integer status)
    }

    historyApi --|> historyService
    historyApi --|> historyController
    historyController --> historyService

}


webportalBFFApi ---> historyController
webportalBFFApi ---> scheduleController
scheduleClient <-- scheduleApi
workflowClient <-- historyApi
@enduml
