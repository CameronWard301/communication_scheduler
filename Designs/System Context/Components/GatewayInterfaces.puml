@startuml Gateway Interfaces

component Worker {
}

interface SendMessageToGatewayActivity {
    + Map<String, String> invokeGateway(String userId, String workflowRunId, String gatewayUrl, Preferences preferences)
}

package "Communication Gateway" as communicationGateway {
    component gateway {

    }

    interface Content {
        + String getContentString()
    }


    class HashHelper {
        + String messageHash(String workflowRunId, String messageContents)
    }

    interface CommunicationHistoryAccessProvider {
        + CommunicationHistory getPreviousCommunicationMessageHash(String messageHash)
        + void removeCommunicationHistoryByMessageHash(String messageHash)
        + void storeCommunication(String workflowRunId, String userId, String messageHash)
    }

    class DefaultCommunicationHistoryAccessProvider implements CommunicationHistoryAccessProvider {
        - DynamoDbAsyncClient dynamoDbAsyncClient
        - DefaultCommunicationHistoryAccessProviderProperties historyAccessProviderProperties
        + Communication getPreviousCommunicationMessageHash(String messageHash)
        + void storeCommunication(String workflowRunId, String userId, String messageHash)
        + void removeCommunicationHistoryByMessageHash(String messageHash)
    }

    class GatewayRequest {
        - String userId
        - String workflowRunId
        + Standard Getters and Setters()
    }

    class GatewayResponse {
        - String userId
        - String messageHash
        - String errorMessage
        + Standard Getters and Setters()
    }

    interface GatewayController <TUser, TContent extends Content>{
        + {static} ResponseEntity<GatewayResponse sendCommunication(GatewayRequest gatewayRequest, GatewayProperties<TUser, TContent> gatewayProperties, CommunicationGatewayService<TUser, TContent> communicationGatewayService)
        + ResponseEntity<GatewayResponse> processGatewayRequest(GatewayRequest gatewayRequest)
    }

    class EmailGatewayController implements GatewayController {
        + ResponseEntity<GatewayResponse> processGatewayRequest(GatewayRequest gatewayRequest)
    }

    abstract class GatewayProperties <TUser, TContent extends Content> {
        - String userId
        - String workflowRunId
        - ContentDeliveryService<TUser, TContent> contentDeliveryService
        - UserContentService<TUser, TContent?> userContentService
        - CommunicationHistoryAccessProvider communicationHistoryAccessProvider
        + Standard Getters() & Setters() & SuperBuilder()
    }

    interface GatewayService <TUser, TContent>{
        + ResponseEntity<GatewayResponse> sendCommunication(GatewayProperties<TUser, TContent> gatewayProperties)
    }

    class CommunicationGatewayService<TUser, TContent extends Content> implements GatewayService {
        + ResponseEntity sendCommunication(GatewayProperties<TUser, TContent> gatewayProperties))
    }
    note right of CommunicationGatewayService
        GatewayProperties object can be created by a
        builder and passed to this method.
    end note

    abstract class GetUserAndContent <TUser, TContent> {
        # TUser getUser(String userId)
        # TContent getContent(String userId)
    }

    class UserAndContent <TUser, TContent extends Content> {
        - TUser user
        - TContent content
    }

    interface UserContentService <TUser, TContent extends Content> {
        + UserAndContent<TUser, TContent> getUserAndContent(String userId)
    }

    class EmailUserContentService <EmailUser, EmailContent> extends GetUserAndContent implements UserContentService {
        + UserAndContent<EmailUser, EmailContent> getUserAndContent(String userId)
        + EmailUser getUser(String userId)
        + EmailContent getContent(String userId)
    }

    interface ContentDeliveryService <TUser, TContent> {
        + void sendContent(TUser user, TContent content)
    }

    class EmailContentDeliveryService<EmailUser, EmailContent> implements ContentDeliveryService {
        + void sendContent(EmailUser user, EmailContent content)
    }

   note left of EmailUserContentService
        This class can extend GetUserAndContent when not using a
        JOIN operation to get the user with the message contents and
        you want to get the entities in separate database calls
   end note


    CommunicationGatewayService --> EmailContentDeliveryService: uses
    CommunicationGatewayService --> EmailUserContentService: uses
    CommunicationGatewayService --> DefaultCommunicationHistoryAccessProvider: uses
    CommunicationGatewayService --> HashHelper: uses
    EmailGatewayController --> CommunicationGatewayService: uses
    EmailGatewayController -> GatewayProperties: uses
    Worker --|> SendMessageToGatewayActivity
    SendMessageToGatewayActivity --> GatewayController: uses
    EmailUserContentService --> UserAndContent: returns
}


@enduml
